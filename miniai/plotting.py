# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/#plotting.ipynb.

# %% auto 0
__all__ = ['show_image', 'subplots', 'show_images']

# %% ../nbs/#plotting.ipynb 1
import matplotlib.pyplot as plt, numpy as np
import fastcore.all as fc

# %% ../nbs/#plotting.ipynb 2
@fc.delegates(plt.Axes.imshow)
def show_image(img, ax=None, figsize=(1.5, 1.5), title=None, ax_off=True, **kwargs):
    if img is None: ax.axis('off'); return ax
    
    if not isinstance(img, np.ndarray): img = np.array(img)
    img = img.squeeze()
    if len(img.shape)==3 and img.shape[0]<=3: img = np.transpose(img, axes=[-2, -1, -3])
    
    if ax is None: fig, ax = plt.subplots(figsize=figsize)
    if title is not None: ax.set_title(title)
    if ax_off: ax.axis('off')
    ax.imshow(img, **kwargs);
    return ax

# %% ../nbs/#plotting.ipynb 3
@fc.delegates(plt.subplots, keep=True)
def subplots(n=1, nrows=None, ncols=None, figsize=None, imsize=None, **kwargs):
    if (ncols is None) and (nrows is None): 
        nrows = int(np.floor(n**0.5))
        ncols = int(np.ceil(n/nrows))
    elif (nrows is None): nrows = int(np.ceil(n/ncols))
    elif (ncols is None): ncols = int(np.ceil(n/nrows))
    fig, ax = plt.subplots(nrows, ncols, 
                           figsize=figsize if (imsize is None) else (imsize[0]*ncols, imsize[1]*nrows),
                           **kwargs)
    if (nrows*ncols != 1): ax = ax.flat
    return fig, ax

# %% ../nbs/#plotting.ipynb 4
@fc.delegates(subplots)
def show_images(images=[], titles=None, imsize=(2, 2), cmap=None, **kwargs):
    fig, ax = subplots(n=len(images), imsize=imsize, **kwargs)
    for i, axis in enumerate(ax):
        if i < len(images):
            show_image(images[i], 
                       axis,
                       title=(None if titles is None else titles[i]), figsize=imsize, cmap=cmap)
        else: axis.axis('off')
